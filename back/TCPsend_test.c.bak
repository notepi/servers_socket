/***********************************
*
*readme
*用于读取信息
*需要输入ip，端口
*功能：向连接的ip和端口号输出信息
*
***********************************/
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <signal.h>
#include <unistd.h>
#include <stdlib.h>
#include <assert.h>
#include <stdio.h>
#include <string.h>


int main(int argc, char *argv[])
{
	
	if (argc <= 2)
	{
		printf("usge:%s ip_address port_number backlog\n",
				basename(argv[0]));
		return -1;
	}
	const char *ip = argv[1];				
	int port = atoi(argv[2]);							// 将端口的ascii转成int
	
	int sockfd = socket (AF_INET, SOCK_STREAM, 0);		// 创建TCP的socket
	// 如果其值为假（即为0），那么它先向stderr打印一条出错信息，然后通过调用 abort 来终止程序运行。
	assert( sockfd >= 0);
	
	/*创建一个IPv4 socket地址*/
	struct sockaddr_in server_address;
	bzero(&server_address, sizeof(server_address));					// 结构体清零
	server_address.sin_family = AF_INET;				// TCP/IPv4协议族
	inet_pton(AF_INET, ip, &server_address.sin_addr);	// 将ip转成网络字节序存入sin_addr
	server_address.sin_port = htons(port);						// 将端口转成网络字节存入sin_port
	
	if (connect(sockfd, (struct sockaddr*)&server_address,
						sizeof(server_address) ) < 0)
	{
			printf("connection failed!\n");
	}
	else
	{
		const char* oob_data = "abc";
		const char* normal_data = "123";
		send(sockfd, normal_data, strlen(normal_data), 0);
		send(sockfd, oob_data, strlen(oob_data), MSG_OOB);
		send(sockfd, normal_data, strlen(normal_data), 0);
	}
	
	close(sockfd);										// 关闭socket
	return 0;	
}






