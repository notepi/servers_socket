/***********************************
*
*readme
*用于读取来自UDP信息
*需要输入ip，端口
*功能：向连接的ip和端口号输出信息
*
***********************************/
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <signal.h>
#include <unistd.h>
#include <stdlib.h>
#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <sys/types.h> 




#define DEST_ADDR 		"224.25.25.25"
#define DEST_PORT 		12345
#define MAX_SENDBUFF	100
/*	函数功能：创建IPV4的socket并绑定返回
	参数：1：监听的ip地址，当地址为NULL时，监听所有。
		  2：监听的端口
		  3：监听队列成员数
	返回：listen的fd			
*/
int Creat_IPV4_UDP_Socket( const char* ip, int port)
{
	
	int sock = socket (AF_INET, SOCK_DGRAM, 0);			// 创建UDP的socket
	// 如果其值为假（即为0），那么它先向stderr打印一条出错信息，然后通过调用 abort 来终止程序运行。
	if ( sock < 0){
		// 如果创建失败，打印错误原因并返回
		printf("errno value: %d, it means: %s",errno, strerror(errno));
		return -1;
	}
	
	/*创建一个IPv4 socket地址*/
	struct sockaddr_in address;
	bzero(&address, sizeof(address));					// 结构体清零
	address.sin_family = AF_INET;						// TCP/IPv4协议族
	if (NULL == ip){									// 地址为空则监听所有
		address.sin_addr.s_addr = htonl(INADDR_ANY);
	}
	else{												// 监听特定IP
		inet_pton(AF_INET, ip, &address.sin_addr);		// 将ip转成网络字节序存入sin_addr
	}
	address.sin_port = htons(port);						// 将端口转成网络字节存入sin_port
	
	int ret = bind (sock, (struct sockaddr*)&address, 	// 绑定socket
				sizeof(address));
	if ( ret < 0){
		// 绑定失败则退出，打印错误原因并返回
		printf("errno value: %d, it means: %s",errno, strerror(errno));
		return -1;
	}
	
	return sock;
	
}

int main(int argc, char *argv[])
{
	struct sockaddr_in client, address;
	int on = 1;
	char SendBuff[MAX_SENDBUFF] = "MESSAGE";
	int sock, ret;
	if (argc < 2){
		printf("usge:%s ip_address port_number backlog\n", basename(argv[0]));
		return -1;
	}
	const char *ip = argv[1];				
	int port = atoi(argv[2]);								// 将端口的ascii转成int
	
		
	sock = Creat_IPV4_UDP_Socket( NULL, port);				// 创建UDP套接字
	if ( sock < 0){
		// 绑定失败则退出，打印错误原因并返回
		printf("errno value: %d, it means: %s",errno, strerror(errno));
		return -1;
	}
	
	ret = setsockopt( sock, IPPROTO_IP, IP_MULTICAST_LOOP, &on, sizeof(on));					// 打开回环	
	printf("errno value: %d, it means: %s\n",errno, strerror(errno));
	if( ret < 0 ){
		// 设置失败则退出，打印错误原因并返回
		printf("errno value: %d, it means: %s",errno, strerror(errno));
		return -1;	
	}
	
	/*创建一个IPv4 socket地址*/
	bzero(&address, sizeof(address));						// 结构体清零
	address.sin_family = AF_INET;							// TCP/IPv4协议族
	inet_pton(AF_INET, DEST_ADDR, &address.sin_addr);		// 将ip转成网络字节序存入sin_addr
	address.sin_port = htons(DEST_PORT);					// 将端口转成网络字节存入sin_port
	socklen_t Dlength = sizeof(const struct sockaddr);
	
	// 发送广播数据
	ret = sendto( sock, SendBuff, sizeof(SendBuff), 0,( const struct sockaddr*)&address, Dlength);
	printf("errno value: %d, it means: %s\n",errno, strerror(errno));
	if ( ret <0){
		// 如果发送失败，打印错误原因并返回
		printf("errno value: %d, it means: %s\n",errno, strerror(errno));
		return -1;
	}
	
	char buff[100];
	bzero(buff, sizeof(buff));
	socklen_t length;
	while(1)
	{
		ret = sendto( sock, SendBuff, sizeof(SendBuff), 0, ( const struct sockaddr*)&address, Dlength);	 
		if (ret == 0){
			break;
		}
		printf("send successful!\n");
		
		sleep(2);
	}
		
	close(sock);
}