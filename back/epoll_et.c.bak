/***********************************
*
*readme
*用于测试ET模式
*需要输入ip，端口,监听数
*功能：测试Epoll_LT
*
***********************************/

#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <sys/epoll.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <fcntl.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <signal.h>
#include <stdlib.h>
#include <assert.h>
#include <pthread.h>

#define  EPOLL_SIZE   1
#define  MAX_EVENTS   1024
#define  MAX_READBUFF 1024

/*将文件描述符设置成非阻塞的*/
/*	函数功能：将文件描述符设置成非阻塞的，并返回文件描述符原始状态
	参数：1：文件描述符
	返回：原始文件描述符			
*/
int SetNonblocking(int fd)
{
	int ret;
	int old_option = fcntl( fd, F_GETFL);					// 获取旧fd的标志
	int new_option = old_option | O_NONBLOCK;				// fd设置为非阻塞模式
	ret = fcntl( fd, F_SETFL, new_option);					// fd设置为非阻塞模式 
	if ( ret < 0){
		// 如果设置失败，打印错误原因并返回
		printf("errno value: %d, it means: %s",errno, strerror(errno));
		return -1;
	}
	return old_option;
}

/*将文件描述符fd的EPOLLEN注册到epollfd指示的epoll内核事件中，
  参数enable_et指定是否fd启动ET模式*/
int addfd(int epollfd, int fd, int enable_et)
{
	struct epoll_event event;
	int ret;
	event.data.fd = fd;
	event.events = EPOLLIN;									// 设置数据可读
	if(1 == enable_et)
	{
	  event.events |= EPOLLET;								// 配置为ET模式，默认是LT模式
	}
	ret = epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &event);	// 在epoll中添加事件
	if (ret < 0){
		printf("errno value: %d, it means: %s\n",errno, strerror(errno));
		return -1;
	}  
	SetNonblocking(fd);										// 将事件配置成非阻塞模式
}

/*建议使用IPv4socket.c中最新版函数*/  
int Creat_IPV4_TCP_Socket( const char* ip, int port, int backlog )
{
	int ret;
	int sockfd = socket (AF_INET, SOCK_STREAM, 0);			// 创建TCP的socket
	if( sockfd < 0){
		// 如果创建失败，打印错误原因并返回
		printf("errno value: %d, it means: %s",errno, strerror(errno));
		return -1;
	}
	
	/*创建一个IPv4 socket地址*/
	struct sockaddr_in address;
	bzero( &address, sizeof(address) );						// 结构体清零
	address.sin_family = AF_INET;							// TCP/IPv4协议族
	inet_pton(AF_INET, ip, &address.sin_addr);				// 将ip转成网络字节序存入sin_addr
	address.sin_port = htons(port);							// 将端口转成网络字节存入sin_port
	
	ret = bind (sockfd, (struct sockaddr*)&address, 		// 绑定socket
					sizeof(address));
	if ( ret < 0){
		// 如果绑定失败，打印错误原因并返回
		printf("errno value: %d, it means: %s",errno, strerror(errno));
		return -1;
	}
	
	ret = listen(sockfd, backlog);							// 最多监听backlog个连接
	if( ret < 0){
		// 如果创建失败，打印错误原因并返回
		printf("errno value: %d, it means: %s",errno, strerror(errno));
		return -1;
	}
	
	return sockfd;											// 返回监听
}




int main(int argc, char *argv[])
{

	int sockfd, connfd, ret, epfd;
	int number;
	if (argc < 3){
		printf("usge:%s ip_address port_number backlog\n",
				basename(argv[0]));
		return -1;
	}
	const char *ip = argv[1];				
	int port = atoi(argv[2]);								// 将端口的ascii转成int
	int backlog = atoi(argv[3]);							// 将监听链接数量的ascii转成int
	struct epoll_event events[MAX_EVENTS];
	char ReadBuff[MAX_READBUFF];
	int i;
	struct sockaddr_in client;								// client信息结构体
	socklen_t client_addrlength = sizeof(client);			// socket地址长度
	printf("errno value: %d, it means: %s\n",errno, strerror(errno));
	sockfd = Creat_IPV4_TCP_Socket( ip, port, backlog);		// 创建TCP的socket
	if( sockfd < 0){
		printf("errno value: %d, it means: %s",errno, strerror(errno));
		return -1;
	}
	
	epfd = epoll_create(EPOLL_SIZE);						// 创建epoll
	if( epfd < 0){
		printf("errno value: %d, it means: %s\n",errno, strerror(errno));
		return -1;
	}
	addfd( epfd, sockfd, 1);								// 注册ET模式的Epoll事件
	while(1)
	{
		number = epoll_wait( epfd, events, MAX_EVENTS, -1);	// 等待事件发生
		if ( number < 0){
			printf("errno value: %d, it means: %s",errno, strerror(errno));
			return -1;
		}
		for (i = 0; i < number; i++ )
		{
			int listenfd = events[i].data.fd;
			if( listenfd == sockfd){						// 来新的链接了
				printf("new client!\n");
				connfd = accept(sockfd, (struct sockaddr*)&client,
								&client_addrlength);
				addfd( epfd, connfd, 1);					// 注册LT模式的Epoll事件
			}
			else if( events[i].events & EPOLLIN){			// 有数据可读
				while(1)
				{
					bzero(ReadBuff, MAX_READBUFF);
					// 接受数据
					ret = recv( events[i].data.fd, ReadBuff, MAX_READBUFF - 1, 0);
					if ( ret < 0){						
						// 数据全部接收完毕
						if( (errno == EAGAIN) || (errno == EWOULDBLOCK)){
							break;
						}
					}
					else if(0 == ret){						// 连接退出
						printf("client leave!\n");
						close(listenfd);					// 关闭连接
						break;								// 跳出循环
					}
					else{									// 本次数据接受完成									
						printf("receive %d bytes:%s\n", ret,ReadBuff);
					}
				}	
			}
			else{											// 事件发生且非数据可读
				printf("someting happen!\n");
			}
		}
	}
}